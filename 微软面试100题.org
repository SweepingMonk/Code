* 微软面试100题
** 将一个二叉查找树转换成双向链表
思路：采用中序优先遍历的方法，对二叉查找树进行遍历，遍历过程中记录遍历
的上一个节点，修改指针，左指针指向上一个节点，右指针指向后一个节点，并
注意对头指针和尾指针的处理
#+BEGIN_EXAMPLE
#include <iostream>
#include <vector>
#include <malloc.h>
using namespace std;

struct node
{
    int value;
    node * left;
    node * right;
};

node * create()
{
    node * root = (node * )malloc(sizeof(node));
    root->value=10;
    node * a, *b, *c, *d, *f;
    a=(node *)malloc(sizeof(node));
    a->value=8;
    b=(node *)malloc(sizeof(node));
    b->value=12;
    c=(node *)malloc(sizeof(node));
    c->value=6;
    d=(node *)malloc(sizeof(node));
    d->value=9;
    f=(node *)malloc(sizeof(node));
    f->value= 4;
    root->left=a;
    root->right=b;
    a->left=c;
    a->right=d;
    c->left=f;
    return root;
}

node * recursive(node * root)
{
    vector<node *> vect;
    node * t = root;
    node * head;
    node * p, * temp;
    head= NULL;
    if(root == NULL)
        return NULL;
    while(t!= NULL)
    {
        vect.push_back(t);
        t=t->left;
    }

    while(vect.size()>0)
    {
        p = vect.back();
        vect.pop_back();
        /* 用来判读是否是第一个出栈节点，如果是那么就是链表头节点 */
        if(head==NULL)
        {
            head=p;
            p->left=NULL;
            temp=p;
        }
        else
        {
            temp->right=p;      /* temp每次记录的都是上一个访问过的节点 */
            p->left=temp;
            temp=p;
        }
        if(p->right!=NULL)
        {
            p=p->right;
            while(p!=NULL)
            {
                vect.push_back(p);
                p=p->left;
            }
        }
    }
    return head;
}

int main()
{
    node * root = create();
    node * head = recursive(root);
    node * p = head;
    while(p->right != NULL)
    {
        printf("%d\n", p->value);
        p=p->right;
    }
    while(p!= NULL)
    {
        printf("%d\n", p->value);
        p=p->left;
    }

    return 0;
}
#+END_EXAMPLE

** 设计包含 min 函数的栈，要求pop, push和min的时间复杂度都为O(1)
主要思想，在push元素的时候，同时记录下当前栈中的最小元素，pop元素的时候恢复栈中的最小元素
struct node{
    int value;
    int minimum;
};
** 在二元树中找出和为某一值的所有路径
题目:输入一个整数和一棵二元树。
从树的根结点开始往下访问一直到叶结点所经过的所有结点形成一条路径。打印出和与输入整数相等的所有路径。

#+BEGIN_EXAMPLE
void find(node * t)
{
    vect.push_back(t);
    sum += t->value;
    if(t->left==NULL && t->right==NULL) /* 判断当前节点是否是叶子节点 */
    {
        if(sum == SUM) /* 判断到达叶子节点时和是否和SUM相同 */
        {
            for(it=vect.begin();it!=vect.end();it++)
                cout<< it->value <<" ";
            cout<<endl;
        }
    }
    else
    {
        if(t->left!=NULL)
            find(t->left);
        if(t->right!=NULL)
            find(t->right);
    }
    vect.pop_back();
    sum-=t->value;
}
#+END_EXAMPLE
** 你让一些人为你工作了七天，你要用一根金条作为报酬。金条被分成七小块，每天给出一块。如果你只能将金条切割两次，你怎样分给这些工人?
  这道题你要明白：不是给出去的就收不回来了，可以用交换的方法

  把金条分成三段（就是分两次，或者切两刀），分别是整根金条的1/7、2/7
  4/7 第一天：给1/7的， 第二天：给2/7的，收回1/7的 第三天，给1/7的 第
  四天：给4/7的，收回1/7和2/7的 第五天：给1/7的 第六天：给2/7的，收回
  1/7的
**  一个包含1001个数的数组，所有数字都在1-1000之间，只有一个数字出现了2次，其它数字都只出现一次，请找出这个重复的数字，空间复杂度为o(1)

1. 注意:已经知道这1001个数中只有一个出现了两次，一种简便的方法是，将所有
数字相加，然后减去1-1000的和，最后得到的数字就是重复元素
2. 基于这样一个原理
x ^ x = 0
x ^ y ^ x = y
0 ^ x = x
因此可以先对这1001个数求异或，然后把结果与1-1000的数进行求异或，最后的
结果就是重复元素
3. 如果允许使用额外空间，则可以使用hash，或者bitmap，散列到1-1000


如果对于给定序列要找到第一个重复元素，则可以使用下述方法：
1. 主要思想：检查每个循环节，如果遍历到某个节点的时候这个位置已经被访问过
了，表明有重复元素
#+BEGIN_EXAMPLE
#include <stdio.h>
#define MIN -65535
int a[6]={2, 4, 1, 3, 5, 2};

int main()
{
    int point;
    for(int i=0;i<6;i++)
    {
        if(a[i]==MIN)
            continue;
        point=a[i];
        while(point != i)
        {
            if(a[point] == MIN)
            {
                printf("%d\n", point);
                return 0;
            }
            int temp = a[point];
            a[point]=MIN;
            point = temp;
        }
        a[point]=MIN;
    }
    return 0;
}
#+END_EXAMPLE

** 判断整数序列是不是二元查找树的后遍历结果
题目：输入一个整数组，判断它是不某二元查找树的后序遍历结果。如果是返回 true，否则返回 false 。

思路：根据后序遍历的结果，可以知道最后一个元素是二叉树的根，借助这个元
素可以把数组序列分成两个部分，第一部分上的节点都位于左子树，第二部分上
的节点都位于右子树，这样缩小了问题规模，只用分别判断左右子树是否是合格
的二叉查找树
#+BEGIN_EXAMPLE
#include <stdio.h>

/* 判断一个数字序列是否是一个二叉查找树的后序遍历序列 */
int isBinary(int * a, int b, int e)
{
    if(e<=b)
        return 1;
    int i=b;
    while(i<e && a[i]<a[e])     /* 找到元素的分割点 */
        i++;
    for(int j=i;j<e;j++)
        if(a[j]<a[e])
            return 0;
    if(!isBinary(a, b, i-1))    /* 判断左子树是否符合而叉查找树的条件 */
        return 0;
    if(!isBinary(a, i, e-1))    /* 判断右子树 */
        return 0;
    return 1;                   /* 如果上边条件都满足，返回1 */
}

int main()
{
    int a[100]={5,7,6,9,11,10,8};
    int result = isBinary(a,0,6);
    printf("%d\n", result);
    return 0;
}
#+END_EXAMPLE

** 给定矩阵a，求矩阵中的一个子矩阵使得所有元素的和最大
思路：假设从第i行到第j行的一个子矩阵具有最大值
ai1 ai2 ai3  ...  ain
...
aj1 aj2 aj3  ...  ajn
要求子矩阵的和，可以将矩阵的每一列相加，得到结果
ai1 + ... + aj1, ai2 + ... + aj2, ....
这样转化为求一维元素的最大连续和
时间复杂度为O(n^3)
#+BEGIN_EXAMPLE
for(int i=0;i<n;i++)
{
    memset(b,0,sizeof(b));
    for(j=i;j<n;j++)
    {
       for(k=0;k<n;k++)
       {
           b[k]+=a[j][k];
       }
       求出一维元素中的最大连续和，并更新整体的最大值
    }
}
#+END_EXAMPLE

** 求在从1到n的正数中1出现的次数
输入一个整数n，求从1到n这n个整数的十进制表示中1出现的次数。
例如输入12，从1到12这些整数中包含1 的数字有1，10，11和12，1一共出现了5
次。

对于一个整数25374,可以将它分为三个部分25Y74, x=25 z=74

1. 当Y<1时，Y只能取0
将0-25074分成两个区间0-24999 25000-25074
0-24999这个区间共有25000个数，Y这个位置上出现0~9的概率都相同，因此出现
1的个数为25000*0.1 即x * 10 ^ (len(z))
25000-25074 这个区间中Y这个位置上出现1的个数为0

因此当Y<1时，这个位置上出现1的个数为x * 10^(len(z))

2. 当Y=1时，将0-25174分成三个区间0-24999 25000-25099 25100-25174
0-24999这个区间共有25000个数，Y这个位置上出现0~9的概率都相同，因此出现
1的个数为25000*0.1 即x * 10^(len(z))
25000-25099 这个区间中Y这个位置上出现1的个数为0
25100-25174 这个区间中Y这个位置上出现1的个数为z+1

因此当Y=1时，这个位置上出现1的个数为x * 10^(len(z)) + z + 1

3. 当Y>1时，将0-25374分成四个区间0-24999 25000-25099 25100-25199
   25200-25374
0-24999这个区间共有25000个数，Y这个位置上出现1的个数为x * 10^(len(z))
25000-25099这个区间中，Y这个位置出现1的个数为0
25100-25199这个区间中，Y这个位置上出现1的个数为10^z
25200-25374这个区间中，Y这个位置上出现1的个数为0

因此当Y>1时，这个位置上出现1的个数为x * 10^(len(z)) + 10^z

#+BEGIN_EXAMPLE
int calculate(char * a)
{
    int len=strlen(a);
    int data=atoi(a);
    int count=0;
    for(int i=0;i<len;i++)
    {
        int temp = data/(int)pow(10, len-i);  //表示x的值
        if(a[i]<'1')
            count+=temp * (int)pow(10, len-i-1);
        else if(a[i]=='1')
            count+=temp * (int)pow(10, len-i-1) + 1 + data%(int)pow(10, len-i-1);
        else
            count+=(temp + 1) * (int)pow(10, len-i-1);
    }
    return count;
}

/* 用最原始的方法，统计每一个数字中1的个数，然后相加 */
int validate(char * a)
{
    int data=atoi(a);
    int count=0;
    for(int i=1;i<=data;i++)
    {
        int temp=i;
        while(temp)
        {
            if(temp%10==1)
                count++;
            temp/=10;
        }
    }
    return count;
}

int main()
{
    char s[100];
    scanf("%s",s);
    int count=calculate(s);
    int cou=validate(s);
    printf("%d %d\n",count, cou);
    return 0;
}
#+END_EXAMPLE

** 统计整数二进制表示中1的个数
http://crane.is-programmer.com/posts/17830.html

1. 采用除法操作，每次用整数n除以2判断最后一位是否为1，然后统计1的个数
2. 将1中的除法改成移位运算
3. 可以考虑每次找到从最低位开始遇到的第一个1，计数，再把它清零，清零的
   位运算操作是与一个零，但是在有1的这一位与零的操作要同时不影响未统计
   过的位数和已经统计过的位数，于是可以有这样一个操作 n&(n-1) ，这个操
   作对比当前操作位高的位没有影响，对低位则完全清零。拿6（110）来做例
   子，第一次 110&101=100，这次操作成功的把从低位起第一个1消掉了，同时
   计数器加1，第二次100&011=000，同理又统计了高位的一个1，此时n已变为0，
   不需要再继续了，于是110中有2个1。

代码如下：
#+BEGIN_EXAMPLE
int test(int n)
{
    int count=0;
    while(n != 0){
        n &= n-1;
        count ++;
    }
    return count;
}
#+END_EXAMPLE
4. 这几个方法虽然也用到了位运算，但是并没有体现其神奇之处，下面这个版
   本则彰显位运算的强大能力，若不告诉这个函数的功能，一般一眼看上去是
   想不到这是做什么的，这也是wikipedia上给出的计算hamming_weight方法。
#+BEGIN_EXAMPLE
int test(int n)
{
    n = (n&0x55555555) + ((n>>1)&0x55555555);
    n = (n&0x33333333) + ((n>>2)&0x33333333);
    n = (n&0x0f0f0f0f) + ((n>>4)&0x0f0f0f0f);
    n = (n&0x00ff00ff) + ((n>>8)&0x00ff00ff);
    n = (n&0x0000ffff) + ((n>>16)&0x0000ffff);

    return n;
}
#+END_EXAMPLE
没有循环，5个位运算语句，一次搞定。

比如这个例子，143的二进制表示是10001111，这里只有8位，高位的0怎么进行与的位运算也是0，所以只考虑低位的运算，按照这个算法走一次

+---+---+---+---+---+---+---+---+
| 1 | 0 | 0 | 0 | 1 | 1 | 1 | 1 |   <---143
+---+---+---+---+---+---+---+---+
|  0 1  |  0 0  |  1 0  |  1 0  |   <---第一次运算后
+-------+-------+-------+-------+
|    0 0 0 1    |    0 1 0 0    |   <---第二次运算后
+---------------+---------------+
|        0 0 0 0 0 1 0 1        |   <---第三次运算后，得数为5
+-------------------------------+

这里运用了分治的思想，先计算每对相邻的2位中有几个1，再计算每相邻的4位中有几个1，下来8位，16位，32位，因为2^5＝32，所以对于32位的机器，5条位运算语句就够了。

像这里第二行第一个格子中，01就表示前两位有1个1，00表示下来的两位中没有
1，其实同理。再下来01+00=0001表示前四位中有1个1，同样的10+10=0100表示
低四位中有4个1，最后一步0001+0100=00000101表示整个8位中有5个1。

** 一个非降序序列，向左移动了n位，查找分界元素
思想，使用二分查找的方法，对传统的二分查找进行修改
#+BEGIN_EXAMPLE
#include <stdio.h>

int main()
{
    int n;
    int a[100];
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        scanf("%d",&a[i]);

    int left=0;
    int right=n-1;
    int middle;
    while(left<right)
    {
        middle=left+(right-left)/2;
        if(a[middle]<a[left])
            left=middle;
        else if(a[middle]>a[left])
            right=middle;
        else
            break;
    }
    /* 最后循环结束的时候，left和right刚好指向了它们的分界元素，left指
     * 向的是最小元素，right指向的是最大元素 */
    printf("%d\n",a[right]);
    return 0;
}
#+END_EXAMPLE
** 判断一个树是否是另一个树的子结构
输入两颗二叉树A和B，判断树B是不是A的子结构
如果A中有一部分子树的结构和B是一样的，那么B就是A的子结构
#+BEGIN_EXAMPLE
给定两棵树，判断它们是否具有相似结构
int DoesValue(node * p1, node * p2)
{
    if(p1==NULL)
        return 0;
    if(p2==NULL)
        return 1;
    if(p1->value==p2->value)
        return DoesValue(p1->left, p2->left) && DoesValue(p1->right, p2->right);
    else
        return 0;
}
#+END_EXAMPLE

** 输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字

#+BEGIN_EXAMPLE

#+END_EXAMPLE
** 35 有两个序列a,b，大小都为n,序列元素的值任意整数，无序；通过交换a,b中的元素，使[序列a元素的和]与[序列b元素的和]之间的差最小。
当前数组a和数组b的和之差为A=sum(a)-sum(b), 交换a、b中的第i，j元素后，
数组a和数组b的和之差为A' = sum(a)-a[i]+b[j] - (sum(b) - b[j] + a[i]) =
A - 2(a[i]-b[j])

假如A大于0
要想让数组a和b的和之差变小，那么必然有-A < A' < A
-A < A - 2(a[i]-b[j]) < A
这时0<a[i]-b[j]<A，因此如果要缩小a，b之间的差，只需要从a和b中分别找到
两个元素使得它们的差在(0, A)之间，越接近A/2越好， 当找不到这样的元素时，表明a，b之间的
差已经最小
#+BEGIN_EXAMPLE
int a[10],b[10];

int findMin(int n)
{
    int sum=0;
    for(int i=0;i<n;i++)
        sum+=a[i]-b[i];
    int flag=0;
    int i,j;
    while(!flag)
    {
        flag=1;
        if(sum>0)
        {
            for(i=0;i<n && flag;i++)
            {
                for(j=0;j<n && flag;j++)
                    if(a[i]-b[j] > 0 && a[i] - b[j] < sum)
                    {
                        sum+=2*(b[j]-a[i]);
                        a[i]=a[i]^b[j];
                        b[j]=b[j]^a[i];
                        a[i]=a[i]^b[j];
                        flag=0;
                    }
            }
        }
        else
        {
            for(i=0;i<n && flag;i++)
            {
                for(j=0;j<n && flag;j++)
                    if(a[i]-b[j] > sum && a[i] - b[j] < 0)
                    {
                        sum+=2*(b[j]-a[i]);
                        a[i]=a[i]^b[j];
                        b[j]=b[j]^a[i];
                        a[i]=a[i]^b[j];
                        flag=0;
                    }
            }
        }
    }
    return sum;
}

int main()
{
    freopen("in","r", stdin);
    int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        scanf("%d%d",&a[i],&b[i]);
    int result = findMin(n);
    printf("%d\n", result);
    for(int i =0;i<n;i++)
        printf("%d %d\n", a[i],b[i]);
    return 0;
}
#+END_EXAMPLE

** 36 n支队伍比赛，已知实力关系和出场顺序，请给出比赛的名次
n支队伍比赛，分别编号为0，1，2。。。。n-1，已知它们之间的实力对比关系，
存储在一个二维数组w[n][n]中，w[i][j] 的值代表编号为i，j的队伍中更强的
一支。

所以w[i][j]=i 或者j，现在给出它们的出场顺序，并存储在数组order[n]中，
比如order[n] = {4,3,5,8,1......}，那么第一轮比赛就是 4对3， 5对8。.......

胜者晋级，败者淘汰，同一轮淘汰的所有队伍排名不再细分，即可以随便排，
下一轮由上一轮的胜者按照顺序，再依次两两比，比如可能是4对5,直至出现第
一名

这道题的关键是弄明白题意，一共n支队伍，给出了出场顺序，如果n为奇数，那
么最后一个队伍不用和任何队伍比赛，直接下一轮比赛

** 37 有n个长为m+1的字符串，问可以连接成一个多长的字符串
有n个长为m+1的字符串，如果某个字符串的最后m个字符与某个字符串的前m个字
符匹配，则两个字符串可以联接，问这n个字符串最多可以连成一个多长的字符
串，如果出现循环，则返回错误。

思路是把每一个字符串看成是有向图中的一个节点，如果a,b可以连接，就有一
条边从a指向b，最后只用求出有向图中是否有环，如果没有则求出最长路径

判断有向图和无向图中是否存在环的好方法：
http://blog.csdn.net/yahohi/article/details/7914152
注意判断有向图是否存在环，可以用拓扑排序和深度优先遍历。

对无向图直接使用深度优先遍历可以得到正确结果，但是有向图中用直接使用深
度优先遍历得到的结果是不对的。需要进行一定的修改。
#+BEGIN_EXAMPLE
无向图：
法1：
如果存在回路，则必存在一个子图，是一个环路。环路中所有顶点的度>=2。
n算法：   中
     第一步：删除所有度<=1的顶点及相关的边，并将另外与这些边相关的其它顶点的度减一。
     第二步：将度数变为1的顶点排入队列，并从该队列中取出一个顶点重复步骤一。
     如果最后还有未删除顶点，则存在环，否则没有环。
n算法分析：
     由于有m条边，n个顶点。如果m>=n，则根据图论知识可直接判断存在环路。
    （证明：如果没有环路，则该图必然是k棵树 k>=1。根据树的性质，边的数目m = n-k。k>=1，所以：m<n）
     如果m<n 则按照上面的算法每删除一个度为0的顶点操作一次（最多n次），或每删除一个度为1的顶点（同时删一条边）操作一次（最多m次）。这两种操作的总数不会超过m+n。由于m<n，所以算法复杂度为O(n)

另：
该方法，算法复杂度不止O(V)，首先初始时刻统计所有顶点的度的时候，复杂度为(V + E)，即使在后来的循环中E>=V，这样算法的复杂度也只能为O(V + E)。其次，在每次循环时，删除度为1的顶点，那么就必须将与这个顶点相连的点的度减一，并且执行delete node from list[list[node]]，这里查找的复杂度为list[list[node]]的长度，只有这样才能保证当degree[i]=1时，list[i]里面只有一个点。这样最差的复杂度就为O(EV)了。
法2：
DFS搜索图，图中的边只可能是树边或反向边，一旦发现反向边，则表明存在环。该算法的复杂度为O(V)。

有向图：
主要有深度优先和拓扑排序两种方法
    1、拓扑排序，如果能够用拓扑排序完成对图中所有节点的排序的话，就说明这个图中没有环，而如果不能完成，则说明有环。
    2、可以用Strongly Connected Components来做，我们可以回忆一下强连通子图的概念，就是说对于一个图的某个子图，该子图中的任意u->v,必有v->u，则这是一个强连通子图。这个限定正好是环的概念。所以我想，通过寻找图的强连通子图的方法应该可以找出一个图中到底有没有环、有几个环。
    3、就是用一个改进的DFS
    刚看到这个问题的时候，我想单纯用DFS就可以解决问题了。但细想一下，是不能够的。如果题目给出的是一个无向图，那么OK，DFS是可以解决的。但无向图得不出正确结果的。比如：A->B,A->C->B,我们用DFS来处理这个图，我们会得出它有环，但其实没有。
    我们可以对DFS稍加变化，来解决这个问题。解决的方法如下：
    图中的一个节点，根据其C[N]的值，有三种状态：
    0，此节点没有被访问过
    -1，被访问过至少1次，其后代节点正在被访问中
    1，其后代节点都被访问过。
    按照这样的假设，当按照DFS进行搜索时，碰到一个节点时有三种可能：
    1、如果C[V]=0，这是一个新的节点，不做处理
    2、如果C[V]=-1，说明是在访问该节点的后代的过程中访问到该节点本身，则图中有环。
    3、如果C[V]=1，类似于2的推导，没有环。    在程序中加上一些特殊的处理，即可以找出图中有几个环，并记录每个环的路径
#+END_EXAMPLE

先建立一个顶点颜色表C[N]
0  白色，未被访问过的节点标白色
-1 灰色，已经被访问过一次，并且正在访问该节点后边的节点
1  黑色，当该节点的所有后代都被访问过标黑色

仍然是按图的节点深度遍历，访问到V时，V若被访问过，那么有2种状态：
C[V]=-1，程序跳出，存在环
C[V]=1，程序继续，这不是环

时间复杂度O(n+e)

** 38 有一个很大很大的输入流，大到没有存储器可以将其存储下来，而且只输入一次，如何从这个输入流中随机取得m个记录
每次输入一个记录时，随机产生一个0到1之间的随机数，
用这些随机数维护一个大小为m的堆，即可
** 用天平（只能比较，不能称重）从一堆小球中找出其中唯一一个较轻的，使用x次天平 最多可以从y个小球中找出较轻的那个，求y与x的关系式
这道题的意思是，当称x次天枰时，最多可以从多少小球中找出较轻的那个
每次将小球分成个数相同的三堆，对其中两堆进行称量，这样可以知道较轻的那
个小球存在于哪堆中，y=3^x

注意每次将小球分成2堆也是可以的，但分成4堆就不行了，所以y的最大值为3^x

** 39 求一个有向图的割点
割点的定义是，如果除去此节点和与其相关的边，有向图不再连通
http://blog.csdn.net/cxllyg/article/details/7610265

求无向连通图的割点集，最简单的，删除一个点然后判断连通性

可以更简单一些：
先在图中进行深度优先遍历，生成深度优先树。 在深度优先树中，根结点为割点，当且仅当他有两个或两个以上的子树。
其余结点v为割点，当且仅当存在一个v的后代结点s，s到v的祖先结点之间没有反向边。

记发现时刻dfn(v)为一个节点v在深度优先搜索过程中第一次遇到的时刻。
记标号函数low(v) = min(dfn(v), low(s), dfn(w))
s是v的儿子，(v,w)是反向边。

low(v) 表示从v或v的后代能追溯到的标号最小的节点。

则非根节点v是割点，当且仅当存在v的一个儿子s，low(s) > = dfn(v)

Do dfs, record low[i] as the lowest vertex that can be reached from i and i’s successor nodes. For each edge i, if low[i] = i and i is not a leaf in dfs tree, then i is a cut point. The other case is the root of dfs, if root has two or more children ,it is a cut point.
#+BEGIN_EXAMPLE
/**
 * g is defined as: g[i][] is the out edges, g[i][0] is the edge count, g[i][1...g[i][0]] are the other end points.
*/
int cnt = 0;
int visited[MAX_NUM];
int lowest[MAX_NUM];
void getCutPoints(int *g[], int cuts[], int n) {
  memset(cuts, 0, sizeof(int)*n);
  memset(visited, 0, sizeof(int)*n);
  memset(lowest, 0, sizeof(int)*n);
  for (int i=0; i<n; i++) {
    if (visited[i] == 0) {
      visited[i] = ++cnt;
      dfs(g, cuts, n, i, i);
  }
}

int dfs(int *g[], int cuts[], int n, int s, int root) {
  int out = 0;
  int low = visit[s];
  for (int i=1; i<=g[s][0]; i++) {
    if (visited[g[s][i]] == 0) {
      out++;
      visited[g[s][i]] = ++cnt;
      int clow = dfs(g, cuts, n, g[s][i], root);
      if (clow < low) low = clow;
    } else {
      if (low > visit[g[s][i]]) {
        low = visit[g[s][i]];
      }
    }
  }
  lowest[s] = low;
  if (s == root && out > 1) {
    cuts[s] = 1;
  }
  return low;
}
#+END_EXAMPLE

** 40 一串首尾相连的珠子(m个)，有N种颜色(N<=10)
一串首尾相连的珠子，有N种颜色，设计一个算法，取出其中一段，要求包含所
有N种颜色，并使长度最短。并分析时间复杂度与空间复杂度。
思路： 将环状的珠子转换成一个很长的字符串，用两个指针front rear分别指
向一段区域的头和尾，rear一直加，用sum记录这个区域中的字符种类数，并用
cn[M]记下这个区域内每种字符的个数，当sum达到要求的时候，向前移动front
指针，一直到某个字符的个数减为0，这个时候就找到了符合要求的区域，记录
下区域的长度，然后找到一个最短的区域。
#+BEGIN_EXAMPLE
#include <stdio.h>
#include <string.h>

int exist(char * c, char * set)
{
    for(int i=0;i<(int)strlen(set);i++)
        if(!c[set[i]])
            return 0;
    return 1;
}

/* 由于题目要求是一个环，所以可以把同一个字符串进行拼接 */
int range(char * s, char * set)
{
    int len=strlen(s);
    int front, rear;
    int minLen=len + 1;
    char c[255];
    memset(c,0,sizeof(c));
    front=rear=0;
    int sum=0;
    while(rear<len)
    {
        /* 当加入一个新的字符时，先判断当前这个区域中该字符个数是否为0，然后判断是否是所需要的字符，如果增加sum的值 */
        if(c[s[rear]]==0)
        {
            for(int i=0;i<(int)strlen(set);i++)
                if(set[i]==s[rear])
                {
                    sum++;
                    break;
                }
        }
        c[s[rear]]++;
        /* 当sum的值达到要求的时候，移动front指针，一直向前移动，直到
         * 某个字符的个数减少为0，查看这时的区间长度 */
        if(sum>=(int)strlen(set))
        {
            while(front<=rear)
            {
                c[s[front]]--;
                front++;
                /* 当某个字符个数减少为0时 */
                if(!exist(c,set))
                {
                    sum--;
                    if(rear-front+2<minLen)
                        minLen=rear-front+2;
                    break;
                }
            }
        }
        rear++;
    }
    return minLen;
}

int main()
{
    char set[10]="acr";
    char s[100];
    scanf("%s",s);
    int result=range(s, set);
    printf("%d\n",result);
    return 0;
}
#+END_EXAMPLE

** 45 对于一个整数矩阵对矩阵中任意元素加一时，需要其相邻元素也加一
题目：对于一个整数矩阵，存在一种运算，对矩阵中任意元素加一时，需要其相
邻（上下左右）某一个元素也加一，现给出一正数矩阵，判断其是否能够由一个
全零矩阵经过上述运算得到

** 46 一个整数数组，长度为n，将其分为m份，使各份的和相等，求m的最大值
比如{3，2，4，3，6} 可以分成{3，2，4，3，6} m=1;
{3,6}{2,4,3} m=2
{3,3}{2,4}{6} m=3 所以m的最大值为3
** 47 4对括号可以有多少种匹配排列方式？比如两对括号可以有两种：（）（）和（（））
思路一：左右括号成一对则抵消，可以求出4对括号的全排列，然后依次判断这个
排列中的左右括号是否符合要求
左括号看做是1，右括号看做-1，在遍历过程中判断sum的值，如果小于0，则不
符合，最后sum的值如果为0则符合条件

思路二：思路一中需要自己找出4对括号中的全排列，可以借助整数来实现，可
以求出00000000到11111111中符合要求的序列，这里的符合要求指
1. 序列中左右括号的个数都为4
2. 对序列遍历求和的时候sum值不能小于0
3. 最后序列的值为0

卡特兰数
** 49 如何对n个数进行排序，要求时间复杂度为O(n),空间复杂度为O(1)
这里需要注意，空间复杂度为O(1)
什么时候空间复杂度为O(1)呢，申请一个空间的时候空间复杂度为O(1),申请100
个空间的时候空间复杂度也为O(1)，当所申请的空间个数与n没有关系的时候，
空间复杂度都为O(1)

看到这一题的第一个想法是使用基数排序，时间复杂度为O(kn),k为数字的平均
长度，但是需要一定的空间

当需要排序的数字在一定范围内的时候，比如(1-65535),这个时候可以申请一个
大小为65535的数组count[65535]，由于申请的内存空间与n没有关系，所以空间复杂度为O(1),然后使用计数排序
1. 遍历序列，记录每个数字的个数，以及序列中数字的总个数
2. 从后往前遍历数组count，给数字排序

** 51 输入一个正数n，输出所有和为n的连续正数序列
例如输入15，由于1+2+3+4+5=4+5+6=7+8=15，所以输出3个连续序列1-5、4-6和
7-8。

解题思路：用两个数small和big分别指向1、2，求从small到big的区间中的所有
数的和，如果和大于sum，则small右移相当于移除较小的数，如果和小于sum则
big右移，相当于移入较大的数，由于最少有两个元素，因此small的最大值为
n/2

#+BEGIN_EXAMPLE
void sequence(int t)
{
    if(t<3)
        return;
    int small,big;
    int p=0;
    small=1;
    big=2;
    p=small+big;
    while(small<=(t>>1))
    {
        if(p==t)
        {
            printf("%d %d\n",small, big);
            p-=small;
            small++;
        }
        else if(p>t)
        {
            p-=small;
            small++;
        }
        else
        {
            big++;
            p+=big;
        }
    }
}
#+END_EXAMPLE
** 52 用两个栈实现一个队列
基本思路：一个栈专门用来做入队操作，另一个队专门用来做出队操作，当出队操
作结束后如果该栈变为空，则把另一个栈中的元素放入该栈中，实现先进先出操
作

扩展，如何用两个队列实现栈的操作
基本思路：一个队列用来做入栈，出栈操作，另一个用来做出栈时的中转
入栈的时候，只用简答的把元素放入队列末尾，当出栈的时候，判断当前队列的
元素个数是否为1，如果为1则直接出队列，否则，当前队列除了最后一个元素，
其它元素出队列，并放入另一个队列中做中转，把最后一个元素出队列并返回
** 68 n个骰子的点数
把n个骰子扔在地上，所有骰子朝上一面的点数之和为S。输入n，打印出S的所有
可能的值出现的概率。
每个骰子有六种可能，n个骰子就有6^n种可能，S的范围是n到6n，只用求
出每个点数对应的情况个数就可以获得对应出现的概率。
n个骰子对应的点数和f(S,n)=f(S-6,n-1) + f(S-5,n-1) + f(S-4,n-1) + f(S-3,n-1) + f(S-2,n-1) + f(S-1,n-1)

并且f(k,k)=1,f(6k,k)=1
当m<n时，f(m,n)=0
可以用DP的方式来求每个点数对应的事件个数f(m,n),n<=m<=6n
#+BEGIN_EXAMPLE
#include <stdio.h>
#include <string.h>
#include <math.h>
/* 这里可以模拟最多100个骰子 */
int f[1000][100];

/* n表示骰子个数 */
void countFrequency(int n)
{
    memset(f,0,sizeof(f));
    /* 斜对角线上的元素都为1 */
    for(int i=1;i<=n;i++)
    {
        f[i][i]=1;
        f[i*6][i]=1;
    }
    /* f(m,n)当m小于n的时候值为0 */
    for(int i=1;i<=n;i++)
        for(int j=i+1;j<=n;j++)
            f[i][j]=0;
    /* 初始化第一列元素     */
    for(int i=1;i<=6;i++)
        f[i][1]=1;
    for(int i=2;i<=n;i++)
        for(int j=i+1;j<6*i;j++)
            f[j][i]=f[j-6][i-1]+f[j-5][i-1]+f[j-4][i-1]+f[j-3][i-1]+f[j-2][i-1]+f[j-1][i-1];
    double event=pow(6,n);
    for(int i=n;i<=6*n;i++)
        printf("%lf ",f[i][n]/event);
    printf("\n");
}

int main()
{
    countFrequency(10);
    return 0;
}
#+END_EXAMPLE
** 74 数组中出现次数超过一半的数字
数组中有一个数字出现的次数超过了数组长度的一半，找出这个数字。
分析：比较简答的方法是，对数组中的元素进行排序，则中间的元素就是所求元
素，使用快速排序的时间复杂度为O(nlogn)

另一种比较巧妙的方法是，从中任取两个数字，如果不相同则删除，最后保留的
数字必然为所求元素
#+BEGIN_EXAMPLE
int getMajor(int a[], int n)
{
    int x, cnt=0;
    for(int i=0;i<n;i++)
    {
        if(cnt==0)
        {
            x=a[i];
            cnt++;
        }
        else if(a[i]==x)
            cnt++;
        else
            cnt--;
    }
    return x;
}
#+END_EXAMPLE

** 76复杂链表的复制
有一个复杂链表，其结点除了有一个m_pNext指针指向下一个结点外，还有一个
m_pSibling指向链表中的任一结点或者NULL.

解题思路：如果只是一个简单的单链表，可以很容易给出复制方案，这里多出了
一个m_pSibling指针，因此如何快速找出m_pSibling所指向的元素是本题的关键

在复制链表的过程中，将原结点的next指针指向新复制出来的结点，而将新节点
的m_pSibling指针指向原始结点，这样第一次复制结束之后，已经形成了一个单
链表，而每个新节点的m_pSibling指针都指向它们对应的原始结点，第二次对节
点的m_pSibling指针进行调整
node->m_pSlibling = node->m_pSlibling->m_pSibling->m_pNext;
#+BEGIN_EXAMPLE
#include <stdio.h>
#include <malloc.h>

struct node
{
    int value;
    node * m_pNext;
    node * m_pSibling;
};
/* 构造链表 */
node * Create()
{
    node * a = (node *)malloc(sizeof(node));
    node * b = (node *)malloc(sizeof(node));
    node * c = (node *)malloc(sizeof(node));
    node * d = (node *)malloc(sizeof(node));
    node * e = (node *)malloc(sizeof(node));
    a->m_pNext=b;
    b->m_pNext=c;
    c->m_pNext=d;
    d->m_pNext=e;
    e->m_pNext=NULL;

    a->m_pSibling=c;
    b->m_pSibling=e;
    c->m_pSibling=NULL;
    d->m_pSibling=b;
    e->m_pSibling=NULL;

    a->value='a';
    b->value='b';
    c->value='c';
    d->value='d';
    e->value='e';
    return a;
}
/* 复制链表 */
node * Clone(node * head)
{
    node * t = head;
    node * temp;
    node * pre=NULL;
    node * p;
    node * m= NULL;             /* 用来指向链表头部 */
    while(t!=NULL)
    {
        p = (node *)malloc(sizeof(node));
        p->value=t->value;
        temp=t;
        t=t->m_pNext;
        temp->m_pNext=p;
        p->m_pSibling=temp;
        if(m==NULL)             /* 保存头结点 */
            m=p;
        if(pre!=NULL)
            pre->m_pNext=p;
        pre=p;
    }
    p->m_pNext=NULL;            /* 将链表最后一个元素的next域赋值为NULL */

    p=m;
    while(p!=NULL)
    {
        node * s = p->m_pSibling->m_pSibling;
        if(s != NULL)
            p->m_pSibling= s->m_pNext;
        else
            p->m_pSibling = NULL;
        p=p->m_pNext;
    }
    return m;
}
/* 打印链表 */
void print(node * head)
{
    while(head!=NULL)
    {
        printf("%c ", head->value);
        if(head->m_pNext!=NULL)
            printf("%c ", head->m_pNext->value);
        else
            printf("NULL ");
        if(head->m_pSibling!=NULL)
            printf("%c\n", head->m_pSibling->value);
        else
            printf("NULL\n");
        head=head->m_pNext;
    }
}

int main()
{
    node * head = Create();
    node * p = Clone(head);
    print(p);
    return 0;
}
#+END_EXAMPLE

** n个数字组成的圆圈，每次删除第m个数字，求在这个圈子中剩下的最后一个数字
n个数字形成一个圆圈，从数字0开始每次从这个圈中删除第m个数字，当前数字为第一个，第二个数字为当前数字的下一个。当一个数字删除之后，从被删除数字的下一个继续删除第m个数字，求出在这个圈子中剩下的最后一个数字。

思路：n个数字对应下标0,1,2,3,...m-2,m-1,m+1, ... n-1当数字个数为n时记录最后一个被删除的元素为f(n,m),第一次删除第m个元素后，剩余元素为m,m+1,m+2...n-1,0,1,2...m-2，这时最后一个被删除的元素记为f'(n-1,m),有f(n,m)=f'(n-1,m)下次删除的时候从m开始，下标转换如下：

 m    0
m+1  1
m+2  2
m+3  3
...
n-1  n-1-m
0    n-m
...
m-2  m-1
转换公式为：p(x)=(x+m)%n  p(x)是未删除时的下标，x是删除一个元素之后的下标值 f(n,m)=f'(n-1,m)=(f(n-1,m)+m)%n

当n=1时， f(n,m)=0时间复杂度为O(n),空间复杂度为O(1)

#+BEGIN_EXAMPLE
int jstep(int n, int m)
{
    int point=0;
    for(int i=2;i<=n;i++)
        point=(point+m)%i;
    return point;
}
#+END_EXAMPLE
** 求fibonacci数列第n项
求fibonacci数列第n项可以从第2项开始一项一项的求，时间复杂度为O(n)

求fibonacci数列第n项的O(logn)算法，从第0项开始，这里主要给出一个公式1,1,2,3,5,8...
|1 1| 的n次方得出的结果为|f(n)   f{n-1)|矩阵的第一行第一列就是所求结果
|1 0|                  |f(n-1) f(n-2)|
所以剩下的工作就是求出数列的n次方，而求给定矩阵的n次方，采用二分法，时间复杂度为O(logn)
#+BEGIN_EXAMPLE
int result[4];
int solid[4]={1,1,1,0};

void mulitip(int * r1, int * r2)
{
    int a = r1[0]*r2[0] + r1[1]*r2[2];
    int b = r1[0]*r2[1] + r1[1]*r2[3];
    int c = r1[2]*r2[0] + r1[3]*r2[2];
    int d = r1[2]*r2[1] + r1[3]*r2[3];
    r1[0]=a;
    r1[1]=b;
    r1[2]=c;
    r1[3]=d;
}

void rect(int n, int * temp)
{
    if(n==1)
    {
        memcpy(temp, solid, sizeof(int)*4);
        return;
    }
    rect(n/2, temp);
    mulitip(temp, temp);
    if(n&1==1)
        mulitip(temp, solid);
}
#+END_EXAMPLE
** 链表排序最常用的方法是归并排序
** 81 用指定元素对数字进行划分
一个 int数 组，里面据无任何限制要求出所有这样的a[i]a[i]a[i]a[i]，其左
边的数都小于等于它，右边的数都大于等于它，能够只用一个额外数组和少量其
它空间实现。

解题思想：对于这样的a[i],由于左边的数都小于它，而右边的数都大于它，所
以如果对数组进行排序操作，那么这个数字的位置也不会发生变化。

首先将数据复制到另外一个数组中，然后对数字进行排序，比对两个数组的元素，
对应下标相等的元素就是所要求的元素

** 82 STL中Set使用什么实现的，为什么不用hash
** 83 实现strcpy和memcpy，注意memcpy可以用来拷贝多种数据
** 84 用随机数生成器生成相同概率的0和1
已知一随机数发生器，产生0的概率是p，产生1的概率是1-p，现在要构造一个发
生器，使得它构造0和1的概率均为1/2,构造一个发生器使得它构造1、2、3的概
率均为1/3, 构造一个发生器使得它生成1、2、3、4、...n的概率均为1/n

对于第一个问题，可以rand()两次，得到11,10,01,00.如果得到00或者11就丢弃，把10看做是1，把01看做是0

其它同理。
对于n个数字，只需要rand() M次，并且满足C(M,M/2)>=n即可

** 94 从随机数构成的数组中找出长度大于等于3的最长等差数列，输出等差数列由小到大
比如输入：1，3，5，-1，
输出：-1，1，3，5
想法：先将数组从小到大进行排序，然后以其中任意两项作为数列的前两项，
计算出后边一项的值，然后在数组中查找，如果查找不成功，则继续下次循环，否则继续查找。
** 99 烧一根不均匀的绳子，从头烧到尾总共需要1个小时。现在又若干条材质相同的绳子，问如何用焼绳的方法来计时一个小时十五分钟呢
想法：一个小时很容易可以用烧一条绳子来计量，如何计量15分钟的时间。
一条绳子从头烧到尾需要一个小时，那么如果从绳子两头同时烧需要30分钟的时间，准备两条绳子，一条绳子从两头开始烧，另外一条从一头开始烧，那么当其中一条绳子烧完的时候，已经过去30分钟了，然后将剩下的绳子同时从两头开始烧，到最后烧完耗时15分钟
** 99 诚实国和说谎国
想法：一个小时很容易可以用烧一条绳子来计量，如何计量15分钟的时间。
一条绳子从头烧到尾需要一个小时，那么如果从绳子两头同时烧需要30分钟的时间，准备两条绳子，一条绳子从两头开始烧，另外一条从一头开始烧，那么当其中一条绳子烧完的时候，已经过去30分钟了，然后将剩下的绳子同时从两头开始烧，到最后烧完耗时15分钟

随表挑选一个人，问他的国家，然后去相反的国家
** 100 在一天的24小时中，时钟的时针、分针和秒针完全重合在一起的时候有几次？都分别是什么时间
计算三个指针是否重合，只需要计算它们与零指针的夹角是否相同即可

对于x时y分z秒
时针与零时的夹角是：((60*x+y)*60+z)*360/(12*60*60)
分针与零时的夹角是：((60*y)+z)*360/(60*60)
秒针与零时的夹角是：z*360/60

当三个夹角相同时，指针都重合，这里计算的时间范围是0-12点，所以最后结果需要乘以2枚举x,y,z的值即可
#+BEGIN_EXAMPLE
#include <stdio.h>
#include <math.h>
#define M 2
int main()
{
    for(int x=0;x<12;x++)
        for(int y=0;y<60;y++)
            for(int z=0;z<60;z++)
            {
                double t1=((60*x+y)*60+z)*360.0/(12*60*60);
                double t2=(double)((60*y)+z)*360.0/(60*60);
                double t3=(double)z*360.0/60;
                if(fabs(t1-t2)<M && fabs(t2-t3)<M)
                    printf("%d %d %d %lf\n", x,y,z, t1);
            }
    return 0;
}
#+END_EXAMPLE

* 卡特兰数以及应用
** 基本概念
卡特兰数具有非常独特的性质,是组合数学中一个常在各种计数问题中出现的数列
http://baike.baidu.com.cn/view/2499752.htm
http://blog.csdn.net/hackbuteer1/article/details/7450250
原理：
令h(0)=1,h(1)=1，catalan数满足递推式
h(n)= h(0)*h(n-1)+h(1)*h(n-2) + ... + h(n-1)h(0) (n>=2)
例如：h(2)=h(0)*h(1)+h(1)*h(0)=1*1+1*1=2
h(3)=h(0)*h(2)+h(1)*h(1)+h(2)*h(0)=1*2+1*1+2*1=5

另类递推式：
h(n)=h(n-1)*(4*n-2)/(n+1);
递推关系的解为：
h(n)=C(2n,n)/(n+1) (n=0,1,2,...)
递推关系的另类解为：
h(n)=c(2n,n)-c(2n,n+1)(n=0,1,2,...)
** 括号化
矩阵链乘： P=a1×a2×a3×……×an，依据乘法结合律，不改变其顺序，只用
括号表示成对的乘积，试问有几种括号化的方案？(h(n)种)
** 出栈次序
一个栈的进栈序列为1，，2，3，...，n，有多少个不同的出栈序列？

首先设f(n)为序列个数为n时的出栈序列数，假定第一次出栈的序列数是k，则第
一次出栈的序数把1~n分成两个序列，其中一个是1~k-1，另一个是k+1~n。

这时，f(n)的值就等价于前k-1个数的出栈种数乘以后n-k个数的出栈种数，即
f(n)=f(k-1) * f(n-k)，由于k可以取值1到n，根据加法原理，将k取不同值的出
栈种数相加，得到总的出栈种数为f（n）=f（0）f（n-1）+f（1）f（n-2）
+……+f（n-1）f（0）

根据卡特兰式的递推式，f(n)=c(2n,n)/(n+1)=c(2n,n)-c(2n,n+1)
最后f(0)=1,f(1)=1

百度百科上提供了另外一种方法

** 买票找零
有2n个人排成一行进入剧场。入场费5元。其中只有n个人有一张5元钞票，另外n
人只有10元钞票，剧院无其它钞票，问有多少种方法使得只要有10元的人买票，
售票处就有5元的钞票找零
** 凸多边形三角划分
在一个凸多边形中，通过若干条互不相交的对角线，把这个多边形划分成了若干
个三角形。现在的任务是键盘上输入凸多边形的边数n，求不同划分的方案数
f（n）。比如当n=6时，f（6）=14。

解题思路：因为凸多边形的任意一条边必定属于某一个三角形，所以我们以某一
条边为基准，以这条边的两个顶点为起点P1和终点Pn（P即Point），将该凸多边
形的顶点依序标记为P1、P2、……、Pn，再在该凸多边形中找任意一个不属于这
两个点的顶点Pk（2<=k<=n-1），来构成一个三角形，用这个三角形把一个凸多
边形划分成两个凸多边形，其中一个凸多边形，是由P1，P2，……，Pk构成的凸
k边形（顶点数即是边数），另一个凸多边形，是由Pk，Pk+1，……，Pn构成的
凸n-k+1边形。

此时，我们若把Pk视为确定一点，那么根据乘法原理，f（n）的问题就等价于——
凸k多边形的划分方案数乘以凸n-k+1多边形的划分方案数，即选择Pk这个顶点的
f（n）=f（k）×f（n-k+1）。而k可以选2到n-1，所以再根据加法原理，将k取
不同值的划分方案相加，得到的总方案数为：f（n）=f（2）f（n-2+1）+f（3）
f（n-3+1）+……+f（n-1）f（2）。看到此处，再看看卡特兰数的递推式，答案
不言而喻，即为f（n）=h（n-2） （n=2，3，4，……）。

　最后，令f（2）=1，f（3）=1。
　　此处f（2）=1和f（3）=1的具体缘由须参考详尽的“卡特兰数”，也许可从
凸四边形f（4）=f（2）f（3）+ f（3）f（2）=2×f（2）f（3）倒推，四边形
的划分方案不用规律推导都可以知道是2，那么2×f（2）f（3）=2，则f（2）f
（3）=1，又f（2）和f（3）若存在的话一定是整数，则f（2）=1，f（3）=1。
** 道路选择问题
一位大城市的律师在她住所以北n个街区和以东n个街区处工作。每天她走2n个街
区去上班。如果她从不穿越从家到办公室的对角线，那么有多少条可能的道路？

是卡特兰式吗？
http://blog.csdn.net/hackbuteer1/article/details/7450250
** 圆上取点问题
在圆上选择2n个点,将这些点成对连接起来使得所得到的n条线段不相交的方法数
** n个节点组成的二叉树的个数
给定N个节点，能构成多少种不同的二叉树
h(0)=1

** 站队问题
12个高矮不同的人，排成两排，每排必须是从矮到高排列，而且第二排比对应的
第一排的人高，问排列方式有多少种？

我们先把这12个人从低到高排列,然后,选择6个人排在第一排,那么剩下的6个肯定是在第二排.
用0表示对应的人在第一排,用1表示对应的人在第二排,那么含有6个0,6个1的序列,就对应一种方案.
比如000000111111就对应着
第一排：0 1 2 3 4 5
第二排：6 7 8 9 10 11
010101010101就对应着
第一排：0 2 4 6 8 10
第二排：1 3 5 7 9 11
问题转换为，这样的满足条件的01序列有多少个。

对于一个合格的序列，在任意时刻，0的个数都要大于等于1的个数。
如果把0看成入栈操作，1看成出栈操作，就是说给定6个元素，合法的入栈出栈序列有多少个。
这就是catalan数,这里只是用于栈，等价地描述还有，二叉树的枚举、多边形分
成三角形的个数、圆括弧插入公式中的方法数，其通项是c(2n, n)/(n+1).




** TODO 后缀树和后缀数组
* STL学习
** 定义比较元素
/* 两种定义排序函数的方法，一种在结构体外，另一种的结构体内 */

/* 重载()操作符 */
bool operator()(const int &a, const int &b){
    return a<b;
}

struct node
{
    float score;
    string name;
    /* 重载<操作符 */
    bool operator<(const node &a) const{
        return score<a.score;
    }
}

** 排序
所有的sort算法的参数都需要输入一个范围[begin, end),这里使用的迭代器都
需要是随机迭代器，也就是说可以随机访问的迭代器，如it+n什么的(partition
和stable_partition除外)

如果需要自己定义比较函数，可以把定义好的仿函数作为参数传入，每种算法都
支持比较函数。

| 函数名            | 功能描述                       |
|-------------------+--------------------------------|
| sort              | 对给定区间所有元素进行排序     |
| stable_sort       | 对给定区间所有元素进行稳定排序 |
| partial_sort      | 对给定区间所有元素部分排序     |
| partial_sort_copy | 对给定区间复制并排序           |
| nth_element       | 找出给定区间某个位置对应的元素 |
| is_sorted         | 判断一个区间是否已经排好序     |
| partition         | 使得符合某个条件的元素放在前面 |
| stable_partition  | 相对稳定的使符合某个条件的元素放在前面            |

** 全排序

vector<int> vect;
sort(vect.begin(),vect.end());
相当于调用
sort(vect.begin(),vect.end(),less<int>>);

上述例子中系统自己为sort提供了less函数，在STL中还提供了其他仿函数
| 名称          | 功能描述 |
|---------------+----------|
| equal_to      | 相等     |
| not_equal_to  | 不相等   |
| less          | 小于     |
| greater       | 大于     |
| less_equal    | 小于等于 |
| greater_equal | 大于等于     |

不要直接写仿函数的名字要写其重载的()函数, less<int>() greater<int>()

在类内部重载<符号
bool operator<(const myclass & m)const{
    return first < m.first;
}

在外部定义两个对象间的比较关系
bool less_second(const myclass & a, const myclass & b){
    return a.second < b.second;
}

sort采用的是快速排序算法，但是不是简单的快速排序，而是结合内插排序算法，
可以保证很好的平均性能，复杂度为nlog(n),stable_sort采用的是归并排序，
分派足够内存，其算法复杂度为nlog(n),否则其复杂度为nlog(n) * log(n)

** 局部排序 partial_sort
局部排序其实是为了减少不必要的操作而提供的排序方式
当需要取一系列数中前5个最小数，可以采用全排序，然后取前5个，也可以使用
部分排序
stable_sort(vect.begin()), vect.end(), less<student>());
替换为：
partial_sort(vect.begin(), vect.begin() + 5, vect.end(),
less<student>());

partial_sort采用堆排序，它在任何情况下的复杂度都是nlog(n)
partial_sort(begin,middle,end);
begin和middle之间的元素有序，但是不包括middle

** 指定元素排序 nth_element
班上有10个学生，如何知道排在倒数第4名的学生
如果要满足上述要求，可以采用sort排好序，然后取第4名，更好的方法时使用
partial_sort只排前4位，然后得到第4位，使用nth_element会更加方便

nth_element(vect.begin(), vect.begin() + 3, vect.end());
因为要取第4大的数，所以是vect.begin() + 3

** 分类算法 partition
partition和stable_partition
这两个函数并不是用来排序的，算做是分类算法
partition函数的作用是：将容器根据程序员的要求 划分成两个部分，属于整理算法。
partition(first,last,compare);//first为容器的首迭代器，last为容器的末迭代器，compare为比较函数（不可略写）。
函数返回值是指向范围中第一个不满足指定条件的迭代器
#+BEGIN_EXAMPLE
#include <iostream>
#include <vector>
using namespace std;

bool comp(int value)
{
    return value > 20;
}

int main()
{
    vector<int> vect;
    vector<int>::iterator it,at;
    vect.push_back(10);
    vect.push_back(32);
    vect.push_back(12);
    vect.push_back(51);
    vect.push_back(8);
    vect.push_back(10);
    vect.push_back(21);
    vect.push_back(40);
    vect.push_back(3);
    at=stable_partition(vect.begin(),vect.end(), comp);

    for(it=vect.begin();it!=at;it++)
        cout<<*it<<endl;

    cout<<"hello"<<endl;

    for(it=at;it!=vect.end();it++)
        cout<<*it<<endl;

    return 0;
}
#+END_EXAMPLE

注意这里需要指定自定义的comp函数，它使得数值必须满足一定的条件

其中stable_partition函数保证了数字的顺序和原来一样

** STL常用元素简介
vector（向量）——STL中标准而安全的数组。只能在vector 的“前面”增加数据。

deque（双端队列double-ended queue）——在功能上和vector相似，但是可以在
前后两端向其中添加数据。

list（列表）——游标一次只可以移动一步。如果你对链表已经很熟悉，那么STL中的list则是一个双向链表（每个节点有指向前驱和指向后继的两个指针）。
set（集合）——包含了经过排序了的数据，这些数据的值(value)必须是唯一的。

map （映射）——经过排序了的二元组的集合，map中的每个元素都是由两个值组成，其中的key（键值，一个map中的键值必须是唯一的）是在排序或搜索时使用，它的值可以在容器中重新获取；而另一个值是该元素关联的数值。比如，除了可以ar[43] = "overripe"这样找到一个数据，map还可以通过ar["banana"] = "overripe"这样的方法找到一个数据。如果你想获得其中的元素信息，通过输入元素的全名就可以轻松实现。

multiset（多重集）——和集合（set）相似，然而其中的值不要求必须是唯一的（即可以有重复）。

multimap（多重映射）——和映射（map）相似，然而其中的键值不要求必须是唯
一的（即可以有重复）。

C++ STL中标准关联容器set, multiset, map, multimap内部采用的是一种非常
高效的平衡检索二叉树：红黑树，也成为RB。RB树的统计性能好于一般的平衡二
叉树

# STL map和set的插入删除效率比用其它序列容器高
对于关联容器来说，不需要做内存拷贝和内存移动，map和set容器内所有元素都
是以节点的方式来存储，其节点结构和链表差不多，指向父节点和子节点。插入
的时候只需要稍作变换，把节点的指针指向新的节点就可以了。删除的时候类似，
稍作变换后把指向删除节点的指针指向其它节点就OK了
# 每次insert之后，以前保存的iterator不会失效
看见了上面答案的解释，你应该已经可以很容易解释这个问题。iterator这里就
相当于指向节点的指针，内存没有变，指向内存的指针怎么会失效呢(当然被删
除的那个元素本身已经失效了)。相对于vector来说，每一次删除和插入，指针
都有可能失效，调用push_back在尾部插入也是如此。因为为了保证内部数据的
连续存放，iterator指向的那块内存在删除和插入过程中可能已经被其他内存覆
盖或者内存已经被释放了。即使时push_back的时候，容器内部空间可能不够，
需要一块新的更大的内存，只有把以前的内存释放，申请新的更大的内存，复制
已有的数据元素到新的内存，最后把需要插入的元素放到最后，那么以前的内存
指针自然就不可用了。特别时在和find等算法在一起使用的时候，牢记这个原则：
不要使用过期的iterator。

** set 和 hash_set
set和hash_set是STL中比较重要的容器，set是以红黑树作为底层的数据结构，
hash_set是以Hash table作为底层的数据结构。set可以再O(logn)时间复杂度进
行插入、删除和查找数据。hash_set操作的时间复杂度比较复杂，取决于哈希函
数和哈希表的负载情况

set简单用法
#+BEGIN_EXAMPLE
#include <iostream>
#include <set>
using namespace std;

int main()
{
    set<int> st;
    set<int>::iterator it;
    st.insert(10);
    st.insert(4);
    st.insert(53);
    st.insert(29);

    for(it=st.begin();it!=st.end();it++)
        cout<<*it<<" ";
    cout<<endl;
    it=st.find(10);
    if(it!=st.end())
        cout<<*it<<endl;
    /* 返回删除的个数，这里是1 */
    int t = st.erase(29);
    cout<<t<<endl;
    for(it=st.begin();it!=st.end();it++)
        cout<<*it<<" ";
    cout<<endl;
    /* 清除所有数据 */
    st.clear();
    return 0;
}
#+END_EXAMPLE

** sort和容器
STL中标准容器主要vector, list, deque, string, set, multiset, map,multimay， 其中set, multiset, map, multimap都是以树结构的方式存储其元素。因此在这些容器中，元素一直是有序的。

这些容器的迭代器类型并不是随机型迭代器，因此，上述的那些排序函数，对于这些容器是不可用的。上述sort函数对于下列容器是可用的：

vector
string
deque

如果你自己定义的容器也支持随机型迭代器，那么使用排序算法是没有任何问题的。

对于list容器，list自带一个sort成员函数list::sort(). 它和算法函数中的
sort差不多，但是list::sort是基于指针的方式排序，也就是说，所有的数据移
动和比较都是此用指针的方式实现，因此排序后的迭代器一直保持有效（vector
中sort后的迭代器会失效).

c语言中的qsort和这里的sort是一样的都采用快速排序，一下排序算法效率从高
到低(耗时从小到大)
1. partition
2. stable_partition
3. nth_element
4. partial_sort
5. sort
6. stable_sort

若需对vector, string, deque, 或 array容器进行全排序，你可选择sort或stable_sort；
若只需对vector, string, deque, 或 array容器中取得top n的元素，部分排序partial_sort是首选.
若对于vector, string, deque, 或array容器，你需要找到第n个位置的元素或者你需要得到top n且不关系top n中的内部顺序，nth_element是最理想的；
若你需要从标准序列容器或者array中把满足某个条件或者不满足某个条件的元素分开，你最好使用partition或stable_partition；
若使用的list容器，你可以直接使用partition和stable_partition算法，你可以使用list::sort代替sort和stable_sort排序。若你需要得到partial_sort或nth_element的排序效果，你必须间接使用。正如上面介绍的有几种方式可以选择。

** map
** vector
** dequeue
* 常用数据结构
** 线段树(区间树)
http://www.cnblogs.com/shuaiwhu/archive/2012/04/22/2464583.html

线段树是一棵二叉树，树中的每一个结点表示了一个区间[a,b]。a,b通常是整数。
每一个叶子节点表示了一个单位区间。对于每一个非叶结点所表示的结点[a,b]，
其左儿子表示的区间为[a,(a+b)/2]，右儿子表示的区间为[(a+b)/2,b](除法去
尾取整）。

线段树T(a,b)也可递归定义为：
若L>1 :  [a, (a+b) div 2]为 T的左儿子；
         [(a+b) div 2,b]为T 的右儿子
若L=1 : T为叶子节点。

线段树中的结点一般采取如下数据结构：
struct Node
{
    int   left,right;  //区间左右值
    Node   *leftchild;
    Node   *rightchild;
};

1. 建树过程
#+BEGIN_EXAMPLE
Node   *build(int   l ,  int r ) //建立二叉树
{
    Node   *root = new Node;
    root->left = l;
    root->right = r;     //设置结点区间
    root->leftchild = NULL;
    root->rightchild = NULL;

    if ( l +1< r )
    {
       int  mid = (r+l) >>1;
       root->leftchild = build ( l , mid ) ;
       root->rightchild = build ( mid  , r) ;
    }
    return    root;
}
#+END_EXAMPLE
